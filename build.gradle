buildscript {
    repositories {
        gradlePluginPortal()
        google()
        mavenCentral()
    }
    dependencies {
        classpath("org.jetbrains.kotlin:kotlin-gradle-plugin:1.5.31")
    }
}

allprojects {
    repositories {
        mavenCentral()
    }
}

File secretPropsFile = project.rootProject.file('secret.properties')
Boolean hasSecrets = false
if (secretPropsFile.exists()) {
    hasSecrets = true
    Properties p = new Properties()
    new FileInputStream(secretPropsFile).withCloseable { is -> p.load(is) }
    p.each { name, value -> ext[name] = value }
}

subprojects {
    group = "io.github.piruin"
    version = "1.2.0"

    apply plugin: "maven-publish"
    apply plugin: "signing"

    publishing {
        publications {
            maven(MavenPublication) {
                pom {
                    name = "GEOK"
                    description = "Kotlin geometry library"
                    url = "https://github.com/piruin/geok"
                    licenses {
                        license {
                            name = "MIT"
                            url = "https://opensource.org/licenses/MIT"
                        }
                    }
                    scm {
                        url = "https://github.com/piruin/geok"
                    }
                    developers {
                        developer {
                            id = "piruin"
                            name = "Piruin Panichphol"
                            url = "https://github.com/piruin"
                        }
                    }
                }
            }
        }

        repositories {
            maven {
                name = "sonatype"
                url = uri("https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/")
                credentials {
                    if (hasSecrets) {
                        username = ossrhUsername
                        password = ossrhPassword
                    }
                }
            }
        }
    }

    signing {
        sign publishing.publications
    }

    tasks {
        withType(Sign) {
            onlyIf { hasSecrets }
        }
    }
}
